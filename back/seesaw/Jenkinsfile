pipeline {
    agent any

    stages {
        stage('gitlab clone'){
            steps {
                git branch: 'back',
                credentialsId: 'my-gitlab-account',
                url: 'git@lab.ssafy.com:s09-fintech-finance-sub2/S09P22A409.git'
            }

             post {
                success {
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure {
                    sh 'echo "Fail Cloned Repository"'
                }
            }
        }


        stage('Gradle Build') { // Gradle 빌드 스테이지: Spring Boot 프로젝트를 빌드합니다.
            steps {
                dir('back/seesaw') { // 'backend/seesaw' 디렉터리 내에서 작업을 실행합니다.
                    sh 'chmod +x gradlew' // gradlew 실행 권한 부여
                    sh './gradlew clean build -x test' // gradlew를 사용해 프로젝트를 빌드하며 테스트는 제외합니다.
                }
            }

            post {
                success {
                    echo 'gradle build success'
                }

                failure {
                    echo 'gradle build failed'
                }
            }
        }

        stage('Docker Build') { // Docker 이미지 빌드 스테이지: Dockerfile을 기반으로 이미지를 빌드합니다.
            steps {
                dir('back/seesaw') {
                    sh 'docker build -t herosof-trashbin:latest .' // 이미지를 빌드합니다
                }
            }

            post {
                success {
                    echo 'docker build success'
                }

                failure {
                    echo 'docker build failed'
                }
            }
        }

        stage('Deploy') { // 배포 스테이지: 이전에 실행 중인 'back-seesaw' 컨테이너를 제거하고 새로운 이미지로 컨테이너를 실행
            steps {
                sh 'docker rm -f back' // 실행 중인 'back' 컨테이너 제거
                sh 'docker run -d --name back-seesaw -p 8080:8080 -u root herosof-trashbin:latest' // 새로운 이미지 실행
            }

            post {
                success {
                    echo 'deploy success'
                }

                failure {
                    echo 'deploy failed'
                }
            }
        }

        stage('Finish') { // 완료 스테이지: 더이상 사용되지 않는 Docker 이미지를 제거합니다.
            steps {
                sh 'docker images -qf dangling=true | xargs -I{} docker rmi {}' // 사용되지 않는 이미지를 제거합니다.
            }
        }
    }
}



pipeline {
    agent any 	// 사용 가능한 에이전트에서 이 파이프라인 또는 해당 단계를 실행
# git 프로젝트 credentials 는 access token 으로 사용
    stages {
        stage('Prepare') {
            steps {
                git branch: 'master',
                    url: 'https://{git access token}@github.com/mooh2jj/board_vue_backend.git'
            }

            post {
                success {
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure {
                    sh 'echo "Fail Cloned Repository"'
                }
            }
        }

        stage('Build') {
            steps {
            	// gralew이 있어야됨. git clone해서 project를 가져옴.
                sh 'chmod +x gradlew'
                sh  './gradlew --warning-mode=all --stacktrace clean build -x test'


                sh 'ls -al ./build'
            }
            post {
                success {
                    echo 'gradle build success'
                }

                failure {
                    echo 'gradle build failed'
                }
            }
        }
        stage('Test') {
            steps {
                echo  '테스트 단계와 관련된 몇 가지 단계를 수행합니다.'
            }
        }
        stage('Prune Docker data') {
            steps {
                sh 'echo "Prune Docker data"'
                sh 'docker system prune -a --volumes -f'
            }

            post {
                success {
                    sh 'echo "Prune Docker data Success"'
                }
                failure {
                    sh 'echo "Prune Docker data Fail"'
                }
            }
        }

        stage('Docker Build'){
            steps{
                sh 'echo " Image Bulid Start"'
                sh 'docker build . -t mooh2jj/board_vue_backend'
            }
            post {
                success {
                    sh 'echo "Bulid Docker Image Success"'
                }

                failure {
                    sh 'echo "Bulid Docker Image Fail"'
                }
            }
        }

        stage('Docker Push') {
            steps {
                withCredentials([string(credentialsId: 'dockerHubPwd', variable: 'dockerHubPwd')]) {
                    sh "docker login -u mooh2jj -p ${dockerHubPwd}"
                }
                sh 'docker push mooh2jj/board_vue_backend'
            }

            post {
                success {
                    echo 'Docker Push success'
                }

                failure {
                    echo 'Docker Push failed'
                }
            }
        }
        stage('Docker Deploy'){
            steps{
                sh 'docker-compose up -d --build'
                sh 'docker-compose ps'
            }
            post {
                success {
                    echo 'docker-compose success'
                }

                failure {
                    echo 'docker-compose failed'
                }
            }
        }
    }
}